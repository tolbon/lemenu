<?php

namespace App\Controller\Admin;

use App\Entity\Menu;
use App\Entity\MenuSection;
use App\Entity\Restaurant;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FilterCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Filters;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Dto\SearchDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextEditorField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;

class MenuCrudController extends AbstractCrudController
{
    /**
     * @var AdminUrlGenerator
     */
    private $adminUrlGenerator;

    public function __construct(AdminUrlGenerator $adminUrlGenerator)
    {
        $this->adminUrlGenerator = $adminUrlGenerator;
    }

    public static function getEntityFqcn(): string
    {
        return Menu::class;
    }

    public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
    {
        $qb = parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters);

        $u = $this->getUser();

//        dd($searchDto, $filters);
//        $restaurantId = $searchDto->getRequest()->query->getAlnum('restaurantId', '');
/*
        if ($restaurantId !== '') {
            $restaurant = $this->getDoctrine()->getRepository(Restaurant::class)->find($restaurantId);
            $qb->andWhere('entity.restaurant = :restaurant')
                ->setParameter('restaurant', $restaurant);
        }
*/
        return $qb;
    }

    public function configureFields(string $pageName): iterable
    {
        return [
            TextField::new('name'),
            TextEditorField::new('description'),
            AssociationField::new('restaurant'),
        ];
    }


    public function configureFilters(Filters $filters): Filters
    {
        return $filters
            ->add('restaurant')
            ;
    }

    public function configureActions(Actions $actions): Actions
    {
        // this action executes the 'renderInvoice()' method of the current CRUD controller
        $viewInvoice = Action::new('viewMenusSection', 'Voir les MenuSections', 'fa fa-file-invoice')
            ->linkToUrl(function (Menu $menu) {
                return $this->adminUrlGenerator->setController(MenuSection::class)
                    ->setAction(Action::INDEX)->set('filters', ['restaurant' => [ 'comparison' => '=', 'value' => $menu->getRestaurant()->getId()]])->generateUrl();
            });

        $actions->add(Action::INDEX, $viewInvoice);
        return parent::configureActions($actions); // TODO: Change the autogenerated stub
    }
}
